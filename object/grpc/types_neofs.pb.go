// Code generated by protoc-gen-go-neofs. DO NOT EDIT.

package object

import "github.com/nspcc-dev/neofs-api-go/v2/util/proto"

func (x *ShortHeader) StableSize() (size int) {
	if x == nil {
		return
	}
	size += proto.NestedStructureSize(1, x.Version)
	size += proto.UInt64Size(2, x.CreationEpoch)
	size += proto.NestedStructureSize(3, x.OwnerId)
	size += proto.EnumSize(4, int32(x.ObjectType))
	size += proto.UInt64Size(5, x.PayloadLength)
	size += proto.NestedStructureSize(6, x.PayloadHash)
	size += proto.NestedStructureSize(7, x.HomomorphicHash)
	return size
}

func (x *ShortHeader) StableMarshal(buf []byte) ([]byte, error) {
	if x == nil {
		return []byte{}, nil
	}
	if buf == nil {
		buf = make([]byte, x.StableSize())
	}
	var err error
	var offset, n int
	_, _, _ = err, offset, n
	n, err = proto.NestedStructureMarshal(1, buf[offset:], x.Version)
	if err != nil {
		return nil, err
	}
	offset += n
	offset += proto.UInt64Marshal(2, buf[offset:], x.CreationEpoch)
	n, err = proto.NestedStructureMarshal(3, buf[offset:], x.OwnerId)
	if err != nil {
		return nil, err
	}
	offset += n
	offset += proto.EnumMarshal(4, buf[offset:], int32(x.ObjectType))
	offset += proto.UInt64Marshal(5, buf[offset:], x.PayloadLength)
	n, err = proto.NestedStructureMarshal(6, buf[offset:], x.PayloadHash)
	if err != nil {
		return nil, err
	}
	offset += n
	n, err = proto.NestedStructureMarshal(7, buf[offset:], x.HomomorphicHash)
	if err != nil {
		return nil, err
	}
	offset += n
	return buf, nil
}

func (x *Header_Attribute) StableSize() (size int) {
	if x == nil {
		return
	}
	size += proto.StringSize(1, x.Key)
	size += proto.StringSize(2, x.Value)
	return size
}

func (x *Header_Attribute) StableMarshal(buf []byte) ([]byte, error) {
	if x == nil {
		return []byte{}, nil
	}
	if buf == nil {
		buf = make([]byte, x.StableSize())
	}
	var err error
	var offset, n int
	_, _, _ = err, offset, n
	offset += proto.StringMarshal(1, buf[offset:], x.Key)
	offset += proto.StringMarshal(2, buf[offset:], x.Value)
	return buf, nil
}

func (x *Header_Split) StableSize() (size int) {
	if x == nil {
		return
	}
	size += proto.NestedStructureSize(1, x.Parent)
	size += proto.NestedStructureSize(2, x.Previous)
	size += proto.NestedStructureSize(3, x.ParentSignature)
	size += proto.NestedStructureSize(4, x.ParentHeader)
	for i := range x.Children {
		size += proto.NestedStructureSize(5, x.Children[i])
	}
	size += proto.BytesSize(6, x.SplitId)
	return size
}

func (x *Header_Split) StableMarshal(buf []byte) ([]byte, error) {
	if x == nil {
		return []byte{}, nil
	}
	if buf == nil {
		buf = make([]byte, x.StableSize())
	}
	var err error
	var offset, n int
	_, _, _ = err, offset, n
	n, err = proto.NestedStructureMarshal(1, buf[offset:], x.Parent)
	if err != nil {
		return nil, err
	}
	offset += n
	n, err = proto.NestedStructureMarshal(2, buf[offset:], x.Previous)
	if err != nil {
		return nil, err
	}
	offset += n
	n, err = proto.NestedStructureMarshal(3, buf[offset:], x.ParentSignature)
	if err != nil {
		return nil, err
	}
	offset += n
	n, err = proto.NestedStructureMarshal(4, buf[offset:], x.ParentHeader)
	if err != nil {
		return nil, err
	}
	offset += n
	for i := range x.Children {
		n, err = proto.NestedStructureMarshal(5, buf[offset:], x.Children[i])
		if err != nil {
			return nil, err
		}
		offset += n
	}
	offset += proto.BytesMarshal(6, buf[offset:], x.SplitId)
	return buf, nil
}

func (x *Header) StableSize() (size int) {
	if x == nil {
		return
	}
	size += proto.NestedStructureSize(1, x.Version)
	size += proto.NestedStructureSize(2, x.ContainerId)
	size += proto.NestedStructureSize(3, x.OwnerId)
	size += proto.UInt64Size(4, x.CreationEpoch)
	size += proto.UInt64Size(5, x.PayloadLength)
	size += proto.NestedStructureSize(6, x.PayloadHash)
	size += proto.EnumSize(7, int32(x.ObjectType))
	size += proto.NestedStructureSize(8, x.HomomorphicHash)
	size += proto.NestedStructureSize(9, x.SessionToken)
	for i := range x.Attributes {
		size += proto.NestedStructureSize(10, x.Attributes[i])
	}
	size += proto.NestedStructureSize(11, x.Split)
	return size
}

func (x *Header) StableMarshal(buf []byte) ([]byte, error) {
	if x == nil {
		return []byte{}, nil
	}
	if buf == nil {
		buf = make([]byte, x.StableSize())
	}
	var err error
	var offset, n int
	_, _, _ = err, offset, n
	n, err = proto.NestedStructureMarshal(1, buf[offset:], x.Version)
	if err != nil {
		return nil, err
	}
	offset += n
	n, err = proto.NestedStructureMarshal(2, buf[offset:], x.ContainerId)
	if err != nil {
		return nil, err
	}
	offset += n
	n, err = proto.NestedStructureMarshal(3, buf[offset:], x.OwnerId)
	if err != nil {
		return nil, err
	}
	offset += n
	offset += proto.UInt64Marshal(4, buf[offset:], x.CreationEpoch)
	offset += proto.UInt64Marshal(5, buf[offset:], x.PayloadLength)
	n, err = proto.NestedStructureMarshal(6, buf[offset:], x.PayloadHash)
	if err != nil {
		return nil, err
	}
	offset += n
	offset += proto.EnumMarshal(7, buf[offset:], int32(x.ObjectType))
	n, err = proto.NestedStructureMarshal(8, buf[offset:], x.HomomorphicHash)
	if err != nil {
		return nil, err
	}
	offset += n
	n, err = proto.NestedStructureMarshal(9, buf[offset:], x.SessionToken)
	if err != nil {
		return nil, err
	}
	offset += n
	for i := range x.Attributes {
		n, err = proto.NestedStructureMarshal(10, buf[offset:], x.Attributes[i])
		if err != nil {
			return nil, err
		}
		offset += n
	}
	n, err = proto.NestedStructureMarshal(11, buf[offset:], x.Split)
	if err != nil {
		return nil, err
	}
	offset += n
	return buf, nil
}

func (x *Object) StableSize() (size int) {
	if x == nil {
		return
	}
	size += proto.NestedStructureSize(1, x.ObjectId)
	size += proto.NestedStructureSize(2, x.Signature)
	size += proto.NestedStructureSize(3, x.Header)
	size += proto.BytesSize(4, x.Payload)
	return size
}

func (x *Object) StableMarshal(buf []byte) ([]byte, error) {
	if x == nil {
		return []byte{}, nil
	}
	if buf == nil {
		buf = make([]byte, x.StableSize())
	}
	var err error
	var offset, n int
	_, _, _ = err, offset, n
	n, err = proto.NestedStructureMarshal(1, buf[offset:], x.ObjectId)
	if err != nil {
		return nil, err
	}
	offset += n
	n, err = proto.NestedStructureMarshal(2, buf[offset:], x.Signature)
	if err != nil {
		return nil, err
	}
	offset += n
	n, err = proto.NestedStructureMarshal(3, buf[offset:], x.Header)
	if err != nil {
		return nil, err
	}
	offset += n
	offset += proto.BytesMarshal(4, buf[offset:], x.Payload)
	return buf, nil
}

func (x *SplitInfo) StableSize() (size int) {
	if x == nil {
		return
	}
	size += proto.BytesSize(1, x.SplitId)
	size += proto.NestedStructureSize(2, x.LastPart)
	size += proto.NestedStructureSize(3, x.Link)
	return size
}

func (x *SplitInfo) StableMarshal(buf []byte) ([]byte, error) {
	if x == nil {
		return []byte{}, nil
	}
	if buf == nil {
		buf = make([]byte, x.StableSize())
	}
	var err error
	var offset, n int
	_, _, _ = err, offset, n
	offset += proto.BytesMarshal(1, buf[offset:], x.SplitId)
	n, err = proto.NestedStructureMarshal(2, buf[offset:], x.LastPart)
	if err != nil {
		return nil, err
	}
	offset += n
	n, err = proto.NestedStructureMarshal(3, buf[offset:], x.Link)
	if err != nil {
		return nil, err
	}
	offset += n
	return buf, nil
}
