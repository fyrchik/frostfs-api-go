// Code generated by protoc-gen-go-neofs. DO NOT EDIT.

package acl

import "github.com/nspcc-dev/neofs-api-go/v2/util/proto"

func (x *EACLRecord_Filter) StableSize() (size int) {
	if x == nil {
		return
	}
	size += proto.EnumSize(1, int32(x.HeaderType))
	size += proto.EnumSize(2, int32(x.MatchType))
	size += proto.StringSize(3, x.Key)
	size += proto.StringSize(4, x.Value)
	return size
}

func (x *EACLRecord_Filter) StableMarshal(buf []byte) ([]byte, error) {
	if x == nil {
		return []byte{}, nil
	}
	if buf == nil {
		buf = make([]byte, x.StableSize())
	}
	var err error
	var offset, n int
	_, _, _ = err, offset, n
	offset += proto.EnumMarshal(1, buf[offset:], int32(x.HeaderType))
	offset += proto.EnumMarshal(2, buf[offset:], int32(x.MatchType))
	offset += proto.StringMarshal(3, buf[offset:], x.Key)
	offset += proto.StringMarshal(4, buf[offset:], x.Value)
	return buf, nil
}

func (x *EACLRecord_Target) StableSize() (size int) {
	if x == nil {
		return
	}
	size += proto.EnumSize(1, int32(x.Role))
	size += proto.RepeatedBytesSize(2, x.Keys)
	return size
}

func (x *EACLRecord_Target) StableMarshal(buf []byte) ([]byte, error) {
	if x == nil {
		return []byte{}, nil
	}
	if buf == nil {
		buf = make([]byte, x.StableSize())
	}
	var err error
	var offset, n int
	_, _, _ = err, offset, n
	offset += proto.EnumMarshal(1, buf[offset:], int32(x.Role))
	offset += proto.RepeatedBytesMarshal(2, buf[offset:], x.Keys)
	return buf, nil
}

func (x *EACLRecord) StableSize() (size int) {
	if x == nil {
		return
	}
	size += proto.EnumSize(1, int32(x.Operation))
	size += proto.EnumSize(2, int32(x.Action))
	for i := range x.Filters {
		size += proto.NestedStructureSize(3, x.Filters[i])
	}
	for i := range x.Targets {
		size += proto.NestedStructureSize(4, x.Targets[i])
	}
	return size
}

func (x *EACLRecord) StableMarshal(buf []byte) ([]byte, error) {
	if x == nil {
		return []byte{}, nil
	}
	if buf == nil {
		buf = make([]byte, x.StableSize())
	}
	var err error
	var offset, n int
	_, _, _ = err, offset, n
	offset += proto.EnumMarshal(1, buf[offset:], int32(x.Operation))
	offset += proto.EnumMarshal(2, buf[offset:], int32(x.Action))
	for i := range x.Filters {
		n, err = proto.NestedStructureMarshal(3, buf[offset:], x.Filters[i])
		if err != nil {
			return nil, err
		}
		offset += n
	}
	for i := range x.Targets {
		n, err = proto.NestedStructureMarshal(4, buf[offset:], x.Targets[i])
		if err != nil {
			return nil, err
		}
		offset += n
	}
	return buf, nil
}

func (x *EACLTable) StableSize() (size int) {
	if x == nil {
		return
	}
	size += proto.NestedStructureSize(1, x.Version)
	size += proto.NestedStructureSize(2, x.ContainerId)
	for i := range x.Records {
		size += proto.NestedStructureSize(3, x.Records[i])
	}
	return size
}

func (x *EACLTable) StableMarshal(buf []byte) ([]byte, error) {
	if x == nil {
		return []byte{}, nil
	}
	if buf == nil {
		buf = make([]byte, x.StableSize())
	}
	var err error
	var offset, n int
	_, _, _ = err, offset, n
	n, err = proto.NestedStructureMarshal(1, buf[offset:], x.Version)
	if err != nil {
		return nil, err
	}
	offset += n
	n, err = proto.NestedStructureMarshal(2, buf[offset:], x.ContainerId)
	if err != nil {
		return nil, err
	}
	offset += n
	for i := range x.Records {
		n, err = proto.NestedStructureMarshal(3, buf[offset:], x.Records[i])
		if err != nil {
			return nil, err
		}
		offset += n
	}
	return buf, nil
}

func (x *BearerToken_Body_TokenLifetime) StableSize() (size int) {
	if x == nil {
		return
	}
	size += proto.UInt64Size(1, x.Exp)
	size += proto.UInt64Size(2, x.Nbf)
	size += proto.UInt64Size(3, x.Iat)
	return size
}

func (x *BearerToken_Body_TokenLifetime) StableMarshal(buf []byte) ([]byte, error) {
	if x == nil {
		return []byte{}, nil
	}
	if buf == nil {
		buf = make([]byte, x.StableSize())
	}
	var err error
	var offset, n int
	_, _, _ = err, offset, n
	offset += proto.UInt64Marshal(1, buf[offset:], x.Exp)
	offset += proto.UInt64Marshal(2, buf[offset:], x.Nbf)
	offset += proto.UInt64Marshal(3, buf[offset:], x.Iat)
	return buf, nil
}

func (x *BearerToken_Body) StableSize() (size int) {
	if x == nil {
		return
	}
	size += proto.NestedStructureSize(1, x.EaclTable)
	size += proto.NestedStructureSize(2, x.OwnerId)
	size += proto.NestedStructureSize(3, x.Lifetime)
	return size
}

func (x *BearerToken_Body) StableMarshal(buf []byte) ([]byte, error) {
	if x == nil {
		return []byte{}, nil
	}
	if buf == nil {
		buf = make([]byte, x.StableSize())
	}
	var err error
	var offset, n int
	_, _, _ = err, offset, n
	n, err = proto.NestedStructureMarshal(1, buf[offset:], x.EaclTable)
	if err != nil {
		return nil, err
	}
	offset += n
	n, err = proto.NestedStructureMarshal(2, buf[offset:], x.OwnerId)
	if err != nil {
		return nil, err
	}
	offset += n
	n, err = proto.NestedStructureMarshal(3, buf[offset:], x.Lifetime)
	if err != nil {
		return nil, err
	}
	offset += n
	return buf, nil
}

func (x *BearerToken) StableSize() (size int) {
	if x == nil {
		return
	}
	size += proto.NestedStructureSize(1, x.Body)
	size += proto.NestedStructureSize(2, x.Signature)
	return size
}

func (x *BearerToken) StableMarshal(buf []byte) ([]byte, error) {
	if x == nil {
		return []byte{}, nil
	}
	if buf == nil {
		buf = make([]byte, x.StableSize())
	}
	var err error
	var offset, n int
	_, _, _ = err, offset, n
	n, err = proto.NestedStructureMarshal(1, buf[offset:], x.Body)
	if err != nil {
		return nil, err
	}
	offset += n
	n, err = proto.NestedStructureMarshal(2, buf[offset:], x.Signature)
	if err != nil {
		return nil, err
	}
	offset += n
	return buf, nil
}
