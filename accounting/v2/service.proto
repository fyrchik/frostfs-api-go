syntax = "proto3";

package accounting.v2;

option go_package = "github.com/nspcc-dev/neofs-api-go/accounting/v2";
option csharp_namespace = "NeoFS.API.Accounting";

import "refs/v2/types.proto";
import "service/v2/meta.proto";
import "service/v2/verify.proto";

// The service provides methods for obtaining information
// about the account balance in NeoFS system.
service Accounting {
  // Returns the amount of funds for the requested NeoFS account.
  rpc Balance (BalanceRequest) returns (BalanceResponse);
}

// Message defines the request body of Balance method.
//
// To indicate the account for which the balance is requested, it's identifier
// is used.
//
// To gain access to the requested information, the request body must be formed
// according to the requirements from the system specification.
message BalanceRequest {
  message Body {
    // Carries user identifier in NeoFS system for which the balance
    // is requested.
    refs.v2.OwnerID owner_id = 1;
  }

  // Body of the balance request message.
  Body body = 1;

  // Carries request meta information. Header data is used only to regulate
  // message transport and does not affect request execution.
  service.v2.RequestMetaHeader meta_header = 2;

  // Carries request verification information. This header is used to
  // authenticate the nodes of the message route and check the correctness
  // of transmission.
  service.v2.RequestVerificationHeader verify_header = 3;
}

// Decimal represents the decimal numbers.
message Decimal {
  // value carries number value.
  int64 value = 1;

  // precision carries value precision.
  uint32 precision = 2;
}

// Message defines the response body of Balance method.
//
// The amount of funds is calculated in decimal numbers.
message BalanceResponse {
  message Body {
    // Carries the amount of funds on the account.
    Decimal balance = 1;
  }

  // Body of the balance response message.
  Body body = 1;

  // Carries response meta information. Header data is used only to regulate
  // message transport and does not affect request execution.
  service.v2.ResponseMetaHeader meta_header = 2;

  // Carries response verification information. This header is used to
  // authenticate the nodes of the message route and check the correctness
  // of transmission.
  service.v2.ResponseVerificationHeader verify_header = 3;
}
