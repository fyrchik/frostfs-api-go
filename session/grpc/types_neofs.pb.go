// Code generated by protoc-gen-go-neofs. DO NOT EDIT.

package session

import "github.com/nspcc-dev/neofs-api-go/v2/util/proto"

func (x *ObjectSessionContext) StableSize() (size int) {
	if x == nil {
		return
	}
	size += proto.EnumSize(1, int32(x.Verb))
	size += proto.NestedStructureSize(2, x.Address)
	return size
}

func (x *ObjectSessionContext) StableMarshal(buf []byte) ([]byte, error) {
	if x == nil {
		return []byte{}, nil
	}
	if buf == nil {
		buf = make([]byte, x.StableSize())
	}
	var err error
	var offset, n int
	_, _, _ = err, offset, n
	offset += proto.EnumMarshal(1, buf[offset:], int32(x.Verb))
	n, err = proto.NestedStructureMarshal(2, buf[offset:], x.Address)
	if err != nil {
		return nil, err
	}
	offset += n
	return buf, nil
}

func (x *ContainerSessionContext) StableSize() (size int) {
	if x == nil {
		return
	}
	size += proto.EnumSize(1, int32(x.Verb))
	size += proto.BoolSize(2, x.Wildcard)
	size += proto.NestedStructureSize(3, x.ContainerId)
	return size
}

func (x *ContainerSessionContext) StableMarshal(buf []byte) ([]byte, error) {
	if x == nil {
		return []byte{}, nil
	}
	if buf == nil {
		buf = make([]byte, x.StableSize())
	}
	var err error
	var offset, n int
	_, _, _ = err, offset, n
	offset += proto.EnumMarshal(1, buf[offset:], int32(x.Verb))
	offset += proto.BoolMarshal(2, buf[offset:], x.Wildcard)
	n, err = proto.NestedStructureMarshal(3, buf[offset:], x.ContainerId)
	if err != nil {
		return nil, err
	}
	offset += n
	return buf, nil
}

func (x *SessionToken_Body_TokenLifetime) StableSize() (size int) {
	if x == nil {
		return
	}
	size += proto.UInt64Size(1, x.Exp)
	size += proto.UInt64Size(2, x.Nbf)
	size += proto.UInt64Size(3, x.Iat)
	return size
}

func (x *SessionToken_Body_TokenLifetime) StableMarshal(buf []byte) ([]byte, error) {
	if x == nil {
		return []byte{}, nil
	}
	if buf == nil {
		buf = make([]byte, x.StableSize())
	}
	var err error
	var offset, n int
	_, _, _ = err, offset, n
	offset += proto.UInt64Marshal(1, buf[offset:], x.Exp)
	offset += proto.UInt64Marshal(2, buf[offset:], x.Nbf)
	offset += proto.UInt64Marshal(3, buf[offset:], x.Iat)
	return buf, nil
}

func (x *SessionToken_Body) StableSize() (size int) {
	if x == nil {
		return
	}
	size += proto.BytesSize(1, x.Id)
	size += proto.NestedStructureSize(2, x.OwnerId)
	size += proto.NestedStructureSize(3, x.Lifetime)
	size += proto.BytesSize(4, x.SessionKey)
	if inner, ok := x.Context.(*SessionToken_Body_Object); ok {
		size += proto.NestedStructureSize(5, inner.Object)
	}
	if inner, ok := x.Context.(*SessionToken_Body_Container); ok {
		size += proto.NestedStructureSize(6, inner.Container)
	}
	return size
}

func (x *SessionToken_Body) StableMarshal(buf []byte) ([]byte, error) {
	if x == nil {
		return []byte{}, nil
	}
	if buf == nil {
		buf = make([]byte, x.StableSize())
	}
	var err error
	var offset, n int
	_, _, _ = err, offset, n
	offset += proto.BytesMarshal(1, buf[offset:], x.Id)
	n, err = proto.NestedStructureMarshal(2, buf[offset:], x.OwnerId)
	if err != nil {
		return nil, err
	}
	offset += n
	n, err = proto.NestedStructureMarshal(3, buf[offset:], x.Lifetime)
	if err != nil {
		return nil, err
	}
	offset += n
	offset += proto.BytesMarshal(4, buf[offset:], x.SessionKey)
	if inner, ok := x.Context.(*SessionToken_Body_Object); ok {
		n, err = proto.NestedStructureMarshal(5, buf[offset:], inner.Object)
		if err != nil {
			return nil, err
		}
		offset += n
	}
	if inner, ok := x.Context.(*SessionToken_Body_Container); ok {
		n, err = proto.NestedStructureMarshal(6, buf[offset:], inner.Container)
		if err != nil {
			return nil, err
		}
		offset += n
	}
	return buf, nil
}

func (x *SessionToken) StableSize() (size int) {
	if x == nil {
		return
	}
	size += proto.NestedStructureSize(1, x.Body)
	size += proto.NestedStructureSize(2, x.Signature)
	return size
}

func (x *SessionToken) StableMarshal(buf []byte) ([]byte, error) {
	if x == nil {
		return []byte{}, nil
	}
	if buf == nil {
		buf = make([]byte, x.StableSize())
	}
	var err error
	var offset, n int
	_, _, _ = err, offset, n
	n, err = proto.NestedStructureMarshal(1, buf[offset:], x.Body)
	if err != nil {
		return nil, err
	}
	offset += n
	n, err = proto.NestedStructureMarshal(2, buf[offset:], x.Signature)
	if err != nil {
		return nil, err
	}
	offset += n
	return buf, nil
}

func (x *XHeader) StableSize() (size int) {
	if x == nil {
		return
	}
	size += proto.StringSize(1, x.Key)
	size += proto.StringSize(2, x.Value)
	return size
}

func (x *XHeader) StableMarshal(buf []byte) ([]byte, error) {
	if x == nil {
		return []byte{}, nil
	}
	if buf == nil {
		buf = make([]byte, x.StableSize())
	}
	var err error
	var offset, n int
	_, _, _ = err, offset, n
	offset += proto.StringMarshal(1, buf[offset:], x.Key)
	offset += proto.StringMarshal(2, buf[offset:], x.Value)
	return buf, nil
}

func (x *RequestMetaHeader) StableSize() (size int) {
	if x == nil {
		return
	}
	size += proto.NestedStructureSize(1, x.Version)
	size += proto.UInt64Size(2, x.Epoch)
	size += proto.UInt32Size(3, x.Ttl)
	for i := range x.XHeaders {
		size += proto.NestedStructureSize(4, x.XHeaders[i])
	}
	size += proto.NestedStructureSize(5, x.SessionToken)
	size += proto.NestedStructureSize(6, x.BearerToken)
	size += proto.NestedStructureSize(7, x.Origin)
	size += proto.UInt64Size(8, x.MagicNumber)
	return size
}

func (x *RequestMetaHeader) StableMarshal(buf []byte) ([]byte, error) {
	if x == nil {
		return []byte{}, nil
	}
	if buf == nil {
		buf = make([]byte, x.StableSize())
	}
	var err error
	var offset, n int
	_, _, _ = err, offset, n
	n, err = proto.NestedStructureMarshal(1, buf[offset:], x.Version)
	if err != nil {
		return nil, err
	}
	offset += n
	offset += proto.UInt64Marshal(2, buf[offset:], x.Epoch)
	offset += proto.UInt32Marshal(3, buf[offset:], x.Ttl)
	for i := range x.XHeaders {
		n, err = proto.NestedStructureMarshal(4, buf[offset:], x.XHeaders[i])
		if err != nil {
			return nil, err
		}
		offset += n
	}
	n, err = proto.NestedStructureMarshal(5, buf[offset:], x.SessionToken)
	if err != nil {
		return nil, err
	}
	offset += n
	n, err = proto.NestedStructureMarshal(6, buf[offset:], x.BearerToken)
	if err != nil {
		return nil, err
	}
	offset += n
	n, err = proto.NestedStructureMarshal(7, buf[offset:], x.Origin)
	if err != nil {
		return nil, err
	}
	offset += n
	offset += proto.UInt64Marshal(8, buf[offset:], x.MagicNumber)
	return buf, nil
}

func (x *ResponseMetaHeader) StableSize() (size int) {
	if x == nil {
		return
	}
	size += proto.NestedStructureSize(1, x.Version)
	size += proto.UInt64Size(2, x.Epoch)
	size += proto.UInt32Size(3, x.Ttl)
	for i := range x.XHeaders {
		size += proto.NestedStructureSize(4, x.XHeaders[i])
	}
	size += proto.NestedStructureSize(5, x.Origin)
	size += proto.NestedStructureSize(6, x.Status)
	return size
}

func (x *ResponseMetaHeader) StableMarshal(buf []byte) ([]byte, error) {
	if x == nil {
		return []byte{}, nil
	}
	if buf == nil {
		buf = make([]byte, x.StableSize())
	}
	var err error
	var offset, n int
	_, _, _ = err, offset, n
	n, err = proto.NestedStructureMarshal(1, buf[offset:], x.Version)
	if err != nil {
		return nil, err
	}
	offset += n
	offset += proto.UInt64Marshal(2, buf[offset:], x.Epoch)
	offset += proto.UInt32Marshal(3, buf[offset:], x.Ttl)
	for i := range x.XHeaders {
		n, err = proto.NestedStructureMarshal(4, buf[offset:], x.XHeaders[i])
		if err != nil {
			return nil, err
		}
		offset += n
	}
	n, err = proto.NestedStructureMarshal(5, buf[offset:], x.Origin)
	if err != nil {
		return nil, err
	}
	offset += n
	n, err = proto.NestedStructureMarshal(6, buf[offset:], x.Status)
	if err != nil {
		return nil, err
	}
	offset += n
	return buf, nil
}

func (x *RequestVerificationHeader) StableSize() (size int) {
	if x == nil {
		return
	}
	size += proto.NestedStructureSize(1, x.BodySignature)
	size += proto.NestedStructureSize(2, x.MetaSignature)
	size += proto.NestedStructureSize(3, x.OriginSignature)
	size += proto.NestedStructureSize(4, x.Origin)
	return size
}

func (x *RequestVerificationHeader) StableMarshal(buf []byte) ([]byte, error) {
	if x == nil {
		return []byte{}, nil
	}
	if buf == nil {
		buf = make([]byte, x.StableSize())
	}
	var err error
	var offset, n int
	_, _, _ = err, offset, n
	n, err = proto.NestedStructureMarshal(1, buf[offset:], x.BodySignature)
	if err != nil {
		return nil, err
	}
	offset += n
	n, err = proto.NestedStructureMarshal(2, buf[offset:], x.MetaSignature)
	if err != nil {
		return nil, err
	}
	offset += n
	n, err = proto.NestedStructureMarshal(3, buf[offset:], x.OriginSignature)
	if err != nil {
		return nil, err
	}
	offset += n
	n, err = proto.NestedStructureMarshal(4, buf[offset:], x.Origin)
	if err != nil {
		return nil, err
	}
	offset += n
	return buf, nil
}

func (x *ResponseVerificationHeader) StableSize() (size int) {
	if x == nil {
		return
	}
	size += proto.NestedStructureSize(1, x.BodySignature)
	size += proto.NestedStructureSize(2, x.MetaSignature)
	size += proto.NestedStructureSize(3, x.OriginSignature)
	size += proto.NestedStructureSize(4, x.Origin)
	return size
}

func (x *ResponseVerificationHeader) StableMarshal(buf []byte) ([]byte, error) {
	if x == nil {
		return []byte{}, nil
	}
	if buf == nil {
		buf = make([]byte, x.StableSize())
	}
	var err error
	var offset, n int
	_, _, _ = err, offset, n
	n, err = proto.NestedStructureMarshal(1, buf[offset:], x.BodySignature)
	if err != nil {
		return nil, err
	}
	offset += n
	n, err = proto.NestedStructureMarshal(2, buf[offset:], x.MetaSignature)
	if err != nil {
		return nil, err
	}
	offset += n
	n, err = proto.NestedStructureMarshal(3, buf[offset:], x.OriginSignature)
	if err != nil {
		return nil, err
	}
	offset += n
	n, err = proto.NestedStructureMarshal(4, buf[offset:], x.Origin)
	if err != nil {
		return nil, err
	}
	offset += n
	return buf, nil
}
