// Code generated by protoc-gen-go-neofs. DO NOT EDIT.

package netmap

import "github.com/nspcc-dev/neofs-api-go/v2/util/proto"

func (x *Filter) StableSize() (size int) {
	if x == nil {
		return
	}
	size += proto.StringSize(1, x.Name)
	size += proto.StringSize(2, x.Key)
	size += proto.EnumSize(3, int32(x.Op))
	size += proto.StringSize(4, x.Value)
	for i := range x.Filters {
		size += proto.NestedStructureSize(5, x.Filters[i])
	}
	return size
}

func (x *Filter) StableMarshal(buf []byte) ([]byte, error) {
	if x == nil {
		return []byte{}, nil
	}
	if buf == nil {
		buf = make([]byte, x.StableSize())
	}
	var err error
	var offset, n int
	_, _, _ = err, offset, n
	offset += proto.StringMarshal(1, buf[offset:], x.Name)
	offset += proto.StringMarshal(2, buf[offset:], x.Key)
	offset += proto.EnumMarshal(3, buf[offset:], int32(x.Op))
	offset += proto.StringMarshal(4, buf[offset:], x.Value)
	for i := range x.Filters {
		n, err = proto.NestedStructureMarshal(5, buf[offset:], x.Filters[i])
		if err != nil {
			return nil, err
		}
		offset += n
	}
	return buf, nil
}

func (x *Selector) StableSize() (size int) {
	if x == nil {
		return
	}
	size += proto.StringSize(1, x.Name)
	size += proto.UInt32Size(2, x.Count)
	size += proto.EnumSize(3, int32(x.Clause))
	size += proto.StringSize(4, x.Attribute)
	size += proto.StringSize(5, x.Filter)
	return size
}

func (x *Selector) StableMarshal(buf []byte) ([]byte, error) {
	if x == nil {
		return []byte{}, nil
	}
	if buf == nil {
		buf = make([]byte, x.StableSize())
	}
	var err error
	var offset, n int
	_, _, _ = err, offset, n
	offset += proto.StringMarshal(1, buf[offset:], x.Name)
	offset += proto.UInt32Marshal(2, buf[offset:], x.Count)
	offset += proto.EnumMarshal(3, buf[offset:], int32(x.Clause))
	offset += proto.StringMarshal(4, buf[offset:], x.Attribute)
	offset += proto.StringMarshal(5, buf[offset:], x.Filter)
	return buf, nil
}

func (x *Replica) StableSize() (size int) {
	if x == nil {
		return
	}
	size += proto.UInt32Size(1, x.Count)
	size += proto.StringSize(2, x.Selector)
	return size
}

func (x *Replica) StableMarshal(buf []byte) ([]byte, error) {
	if x == nil {
		return []byte{}, nil
	}
	if buf == nil {
		buf = make([]byte, x.StableSize())
	}
	var err error
	var offset, n int
	_, _, _ = err, offset, n
	offset += proto.UInt32Marshal(1, buf[offset:], x.Count)
	offset += proto.StringMarshal(2, buf[offset:], x.Selector)
	return buf, nil
}

func (x *PlacementPolicy) StableSize() (size int) {
	if x == nil {
		return
	}
	for i := range x.Replicas {
		size += proto.NestedStructureSize(1, x.Replicas[i])
	}
	size += proto.UInt32Size(2, x.ContainerBackupFactor)
	for i := range x.Selectors {
		size += proto.NestedStructureSize(3, x.Selectors[i])
	}
	for i := range x.Filters {
		size += proto.NestedStructureSize(4, x.Filters[i])
	}
	size += proto.NestedStructureSize(5, x.SubnetId)
	return size
}

func (x *PlacementPolicy) StableMarshal(buf []byte) ([]byte, error) {
	if x == nil {
		return []byte{}, nil
	}
	if buf == nil {
		buf = make([]byte, x.StableSize())
	}
	var err error
	var offset, n int
	_, _, _ = err, offset, n
	for i := range x.Replicas {
		n, err = proto.NestedStructureMarshal(1, buf[offset:], x.Replicas[i])
		if err != nil {
			return nil, err
		}
		offset += n
	}
	offset += proto.UInt32Marshal(2, buf[offset:], x.ContainerBackupFactor)
	for i := range x.Selectors {
		n, err = proto.NestedStructureMarshal(3, buf[offset:], x.Selectors[i])
		if err != nil {
			return nil, err
		}
		offset += n
	}
	for i := range x.Filters {
		n, err = proto.NestedStructureMarshal(4, buf[offset:], x.Filters[i])
		if err != nil {
			return nil, err
		}
		offset += n
	}
	n, err = proto.NestedStructureMarshal(5, buf[offset:], x.SubnetId)
	if err != nil {
		return nil, err
	}
	offset += n
	return buf, nil
}

func (x *NodeInfo_Attribute) StableSize() (size int) {
	if x == nil {
		return
	}
	size += proto.StringSize(1, x.Key)
	size += proto.StringSize(2, x.Value)
	size += proto.RepeatedStringSize(3, x.Parents)
	return size
}

func (x *NodeInfo_Attribute) StableMarshal(buf []byte) ([]byte, error) {
	if x == nil {
		return []byte{}, nil
	}
	if buf == nil {
		buf = make([]byte, x.StableSize())
	}
	var err error
	var offset, n int
	_, _, _ = err, offset, n
	offset += proto.StringMarshal(1, buf[offset:], x.Key)
	offset += proto.StringMarshal(2, buf[offset:], x.Value)
	offset += proto.RepeatedStringMarshal(3, buf[offset:], x.Parents)
	return buf, nil
}

func (x *NodeInfo) StableSize() (size int) {
	if x == nil {
		return
	}
	size += proto.BytesSize(1, x.PublicKey)
	size += proto.RepeatedStringSize(2, x.Addresses)
	for i := range x.Attributes {
		size += proto.NestedStructureSize(3, x.Attributes[i])
	}
	size += proto.EnumSize(4, int32(x.State))
	return size
}

func (x *NodeInfo) StableMarshal(buf []byte) ([]byte, error) {
	if x == nil {
		return []byte{}, nil
	}
	if buf == nil {
		buf = make([]byte, x.StableSize())
	}
	var err error
	var offset, n int
	_, _, _ = err, offset, n
	offset += proto.BytesMarshal(1, buf[offset:], x.PublicKey)
	offset += proto.RepeatedStringMarshal(2, buf[offset:], x.Addresses)
	for i := range x.Attributes {
		n, err = proto.NestedStructureMarshal(3, buf[offset:], x.Attributes[i])
		if err != nil {
			return nil, err
		}
		offset += n
	}
	offset += proto.EnumMarshal(4, buf[offset:], int32(x.State))
	return buf, nil
}

func (x *NetworkConfig_Parameter) StableSize() (size int) {
	if x == nil {
		return
	}
	size += proto.BytesSize(1, x.Key)
	size += proto.BytesSize(2, x.Value)
	return size
}

func (x *NetworkConfig_Parameter) StableMarshal(buf []byte) ([]byte, error) {
	if x == nil {
		return []byte{}, nil
	}
	if buf == nil {
		buf = make([]byte, x.StableSize())
	}
	var err error
	var offset, n int
	_, _, _ = err, offset, n
	offset += proto.BytesMarshal(1, buf[offset:], x.Key)
	offset += proto.BytesMarshal(2, buf[offset:], x.Value)
	return buf, nil
}

func (x *NetworkConfig) StableSize() (size int) {
	if x == nil {
		return
	}
	for i := range x.Parameters {
		size += proto.NestedStructureSize(1, x.Parameters[i])
	}
	return size
}

func (x *NetworkConfig) StableMarshal(buf []byte) ([]byte, error) {
	if x == nil {
		return []byte{}, nil
	}
	if buf == nil {
		buf = make([]byte, x.StableSize())
	}
	var err error
	var offset, n int
	_, _, _ = err, offset, n
	for i := range x.Parameters {
		n, err = proto.NestedStructureMarshal(1, buf[offset:], x.Parameters[i])
		if err != nil {
			return nil, err
		}
		offset += n
	}
	return buf, nil
}

func (x *NetworkInfo) StableSize() (size int) {
	if x == nil {
		return
	}
	size += proto.UInt64Size(1, x.CurrentEpoch)
	size += proto.UInt64Size(2, x.MagicNumber)
	size += proto.Int64Size(3, x.MsPerBlock)
	size += proto.NestedStructureSize(4, x.NetworkConfig)
	return size
}

func (x *NetworkInfo) StableMarshal(buf []byte) ([]byte, error) {
	if x == nil {
		return []byte{}, nil
	}
	if buf == nil {
		buf = make([]byte, x.StableSize())
	}
	var err error
	var offset, n int
	_, _, _ = err, offset, n
	offset += proto.UInt64Marshal(1, buf[offset:], x.CurrentEpoch)
	offset += proto.UInt64Marshal(2, buf[offset:], x.MagicNumber)
	offset += proto.Int64Marshal(3, buf[offset:], x.MsPerBlock)
	n, err = proto.NestedStructureMarshal(4, buf[offset:], x.NetworkConfig)
	if err != nil {
		return nil, err
	}
	offset += n
	return buf, nil
}
