// Code generated by protoc-gen-go-neofs. DO NOT EDIT.

package audit

import "github.com/nspcc-dev/neofs-api-go/v2/util/proto"

func (x *DataAuditResult) StableSize() (size int) {
	if x == nil {
		return
	}
	size += proto.NestedStructureSize(1, x.Version)
	size += proto.Fixed64Size(2, x.AuditEpoch)
	size += proto.NestedStructureSize(3, x.ContainerId)
	size += proto.BytesSize(4, x.PublicKey)
	size += proto.BoolSize(5, x.Complete)
	size += proto.UInt32Size(6, x.Requests)
	size += proto.UInt32Size(7, x.Retries)
	for i := range x.PassSg {
		size += proto.NestedStructureSize(8, x.PassSg[i])
	}
	for i := range x.FailSg {
		size += proto.NestedStructureSize(9, x.FailSg[i])
	}
	size += proto.UInt32Size(10, x.Hit)
	size += proto.UInt32Size(11, x.Miss)
	size += proto.UInt32Size(12, x.Fail)
	size += proto.RepeatedBytesSize(13, x.PassNodes)
	size += proto.RepeatedBytesSize(14, x.FailNodes)
	return size
}

func (x *DataAuditResult) StableMarshal(buf []byte) ([]byte, error) {
	if x == nil {
		return []byte{}, nil
	}
	if buf == nil {
		buf = make([]byte, x.StableSize())
	}
	var err error
	var offset, n int
	_, _, _ = err, offset, n
	n, err = proto.NestedStructureMarshal(1, buf[offset:], x.Version)
	if err != nil {
		return nil, err
	}
	offset += n
	offset += proto.Fixed64Marshal(2, buf[offset:], x.AuditEpoch)
	n, err = proto.NestedStructureMarshal(3, buf[offset:], x.ContainerId)
	if err != nil {
		return nil, err
	}
	offset += n
	offset += proto.BytesMarshal(4, buf[offset:], x.PublicKey)
	offset += proto.BoolMarshal(5, buf[offset:], x.Complete)
	offset += proto.UInt32Marshal(6, buf[offset:], x.Requests)
	offset += proto.UInt32Marshal(7, buf[offset:], x.Retries)
	for i := range x.PassSg {
		n, err = proto.NestedStructureMarshal(8, buf[offset:], x.PassSg[i])
		if err != nil {
			return nil, err
		}
		offset += n
	}
	for i := range x.FailSg {
		n, err = proto.NestedStructureMarshal(9, buf[offset:], x.FailSg[i])
		if err != nil {
			return nil, err
		}
		offset += n
	}
	offset += proto.UInt32Marshal(10, buf[offset:], x.Hit)
	offset += proto.UInt32Marshal(11, buf[offset:], x.Miss)
	offset += proto.UInt32Marshal(12, buf[offset:], x.Fail)
	offset += proto.RepeatedBytesMarshal(13, buf[offset:], x.PassNodes)
	offset += proto.RepeatedBytesMarshal(14, buf[offset:], x.FailNodes)
	return buf, nil
}
