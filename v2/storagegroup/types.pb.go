// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: v2/storagegroup/types.proto

package storagegroup

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	refs "github.com/nspcc-dev/neofs-api-go/v2/refs"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// StorageGroup groups the information about the NeoFS storage group.
// The storage group consists of objects from single container.
type StorageGroup struct {
	// validation_data_size carries the total size of the payloads of the storage
	// group members.
	ValidationDataSize uint64 `protobuf:"varint,1,opt,name=validation_data_size,json=validationDataSize,proto3" json:"validation_data_size,omitempty"`
	// validation_hash carries homomorphic hash from the concatenation of the
	// payloads of the storage group members
	// The order of concatenation is the same as the order of the members in the
	// Members field.
	ValidationHash []byte `protobuf:"bytes,2,opt,name=validation_hash,json=validationHash,proto3" json:"validation_hash,omitempty"`
	// expiration_epoch carries last NeoFS epoch number of the storage group
	// lifetime.
	ExpirationEpoch uint64 `protobuf:"varint,3,opt,name=expiration_epoch,json=expirationEpoch,proto3" json:"expiration_epoch,omitempty"`
	// Members carries the list of identifiers of the object storage group members.
	// The list is strictly ordered.
	Members              []*refs.ObjectID `protobuf:"bytes,4,rep,name=members,proto3" json:"members,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *StorageGroup) Reset()         { *m = StorageGroup{} }
func (m *StorageGroup) String() string { return proto.CompactTextString(m) }
func (*StorageGroup) ProtoMessage()    {}
func (*StorageGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_593772eae6c18cdf, []int{0}
}
func (m *StorageGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StorageGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StorageGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StorageGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StorageGroup.Merge(m, src)
}
func (m *StorageGroup) XXX_Size() int {
	return m.Size()
}
func (m *StorageGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_StorageGroup.DiscardUnknown(m)
}

var xxx_messageInfo_StorageGroup proto.InternalMessageInfo

func (m *StorageGroup) GetValidationDataSize() uint64 {
	if m != nil {
		return m.ValidationDataSize
	}
	return 0
}

func (m *StorageGroup) GetValidationHash() []byte {
	if m != nil {
		return m.ValidationHash
	}
	return nil
}

func (m *StorageGroup) GetExpirationEpoch() uint64 {
	if m != nil {
		return m.ExpirationEpoch
	}
	return 0
}

func (m *StorageGroup) GetMembers() []*refs.ObjectID {
	if m != nil {
		return m.Members
	}
	return nil
}

func init() {
	proto.RegisterType((*StorageGroup)(nil), "neo.fs.v2.storagegroup.StorageGroup")
}

func init() { proto.RegisterFile("v2/storagegroup/types.proto", fileDescriptor_593772eae6c18cdf) }

var fileDescriptor_593772eae6c18cdf = []byte{
	// 297 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xdf, 0x4a, 0xc3, 0x30,
	0x14, 0xc6, 0xcd, 0x36, 0x14, 0xe2, 0x70, 0x12, 0x45, 0xaa, 0x42, 0x19, 0xde, 0x38, 0x2f, 0x96,
	0x48, 0xbd, 0x14, 0x04, 0x65, 0xfe, 0xd9, 0x8d, 0xca, 0x7a, 0xe7, 0xcd, 0x48, 0xdb, 0xd3, 0x36,
	0xb2, 0x36, 0x21, 0xc9, 0x8a, 0xee, 0x49, 0x7c, 0x06, 0x9f, 0x64, 0x97, 0x3e, 0x82, 0xd4, 0x17,
	0x91, 0x6e, 0x48, 0x8b, 0x97, 0xf9, 0xf2, 0x3b, 0xe7, 0xf0, 0xfd, 0xf0, 0x71, 0xe1, 0x31, 0x63,
	0xa5, 0xe6, 0x09, 0x24, 0x5a, 0xce, 0x15, 0xb3, 0xef, 0x0a, 0x0c, 0x55, 0x5a, 0x5a, 0x49, 0x0e,
	0x72, 0x90, 0x34, 0x36, 0xb4, 0xf0, 0x68, 0x93, 0x39, 0xda, 0x2b, 0x3c, 0xa6, 0x21, 0x36, 0x4d,
	0xf8, 0x64, 0x89, 0x70, 0xd7, 0x5f, 0x53, 0xf7, 0x15, 0x45, 0xce, 0xf1, 0x7e, 0xc1, 0x67, 0x22,
	0xe2, 0x56, 0xc8, 0x7c, 0x1a, 0x71, 0xcb, 0xa7, 0x46, 0x2c, 0xc0, 0x41, 0x7d, 0x34, 0xe8, 0x4c,
	0x48, 0xfd, 0x37, 0xe2, 0x96, 0xfb, 0x62, 0x01, 0xe4, 0x14, 0xf7, 0x1a, 0x13, 0x29, 0x37, 0xa9,
	0xd3, 0xea, 0xa3, 0x41, 0x77, 0xb2, 0x53, 0xc7, 0x0f, 0xdc, 0xa4, 0xe4, 0x0c, 0xef, 0xc2, 0x9b,
	0x12, 0x7a, 0x0d, 0x82, 0x92, 0x61, 0xea, 0xb4, 0x57, 0x6b, 0x7b, 0x75, 0x7e, 0x5b, 0xc5, 0xc4,
	0xc3, 0x5b, 0x19, 0x64, 0x01, 0x68, 0xe3, 0x74, 0xfa, 0xed, 0xc1, 0xb6, 0xe7, 0xd0, 0xba, 0x55,
	0x55, 0x82, 0x3e, 0x05, 0xaf, 0x10, 0xda, 0xf1, 0x68, 0xf2, 0x07, 0xde, 0xcc, 0x96, 0xa5, 0x8b,
	0xbe, 0x4a, 0x17, 0x7d, 0x97, 0x2e, 0xfa, 0xf8, 0x71, 0x37, 0x5e, 0xae, 0x12, 0x61, 0xd3, 0x79,
	0x40, 0x43, 0x99, 0xb1, 0xdc, 0xa8, 0x30, 0x1c, 0x46, 0x50, 0xb0, 0x1c, 0x64, 0x6c, 0x86, 0x5c,
	0x89, 0x61, 0x22, 0xd9, 0x3f, 0x91, 0x97, 0xcd, 0xc7, 0x67, 0xeb, 0xf0, 0x11, 0xe4, 0x9d, 0x4f,
	0xaf, 0x9f, 0xc7, 0xd5, 0xdd, 0xa6, 0xa7, 0x60, 0x73, 0xe5, 0xef, 0xe2, 0x37, 0x00, 0x00, 0xff,
	0xff, 0xec, 0x24, 0x17, 0x69, 0x8b, 0x01, 0x00, 0x00,
}

func (m *StorageGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StorageGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StorageGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Members[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.ExpirationEpoch != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ExpirationEpoch))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ValidationHash) > 0 {
		i -= len(m.ValidationHash)
		copy(dAtA[i:], m.ValidationHash)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ValidationHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.ValidationDataSize != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ValidationDataSize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StorageGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValidationDataSize != 0 {
		n += 1 + sovTypes(uint64(m.ValidationDataSize))
	}
	l = len(m.ValidationHash)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ExpirationEpoch != 0 {
		n += 1 + sovTypes(uint64(m.ExpirationEpoch))
	}
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StorageGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StorageGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StorageGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationDataSize", wireType)
			}
			m.ValidationDataSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidationDataSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidationHash = append(m.ValidationHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ValidationHash == nil {
				m.ValidationHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationEpoch", wireType)
			}
			m.ExpirationEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationEpoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &refs.ObjectID{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
